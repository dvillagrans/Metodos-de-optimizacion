import numpy as np
import sys
import os
sys.path.append(os.path.dirname(os.path.abspath(__file__)))
from app.solvers.dosfases_solver import dosfases_solver

def debug_dosfases_detailed():
    """
    Debug detallado del problema con el m√©todo Dos Fases
    """
    print("üîç DEBUG DETALLADO - M√âTODO DOS FASES")
    print("=" * 60)
    
    # Problema que sabemos que es infactible
    c = [2, 3, 4]  # MAX Z = 2x‚ÇÅ + 3x‚ÇÇ + 4x‚ÇÉ
    A = [
        [1, 1, 1],   # x‚ÇÅ + x‚ÇÇ + x‚ÇÉ ‚â§ 30
        [2, 1, 0],   # 2x‚ÇÅ + x‚ÇÇ ‚â• 40  <- ESTA ES EL PROBLEMA
        [0, 3, 2]    # 3x‚ÇÇ + 2x‚ÇÉ ‚â§ 60
    ]
    b = [30, 40, 60]
    
    print("Problema original:")
    print("  MAX Z = 2x‚ÇÅ + 3x‚ÇÇ + 4x‚ÇÉ")
    print("  s.a.  x‚ÇÅ + x‚ÇÇ + x‚ÇÉ ‚â§ 30")
    print("       2x‚ÇÅ + x‚ÇÇ     ‚â• 40  ‚Üê Restricci√≥n problem√°tica")
    print("       3x‚ÇÇ + 2x‚ÇÉ    ‚â§ 60")
    print("       x‚ÇÅ,x‚ÇÇ,x‚ÇÉ ‚â• 0")
    print()
    
    print("üö® PROBLEMA IDENTIFICADO:")
    print("  El solver actual NO maneja restricciones ‚â• correctamente")
    print("  Est√° tratando 2x‚ÇÅ + x‚ÇÇ ‚â• 40 como si fuera 2x‚ÇÅ + x‚ÇÇ ‚â§ 40")
    print()
    
    # Intentar ejecutar el solver y capturar el resultado
    try:
        result = dosfases_solver(c, A, b, eq_constraints=[], track_iterations=True)
        solution, optimal_value, tableau_history, pivot_history = result
        
        print("‚ùå RESULTADO INCORRECTO DEL SOLVER:")
        print(f"  Soluci√≥n: [{solution[0]:.3f}, {solution[1]:.3f}, {solution[2]:.3f}]")
        print(f"  Valor √≥ptimo: {optimal_value:.3f}")
        print()
        
        # Verificar manualmente la soluci√≥n
        x1, x2, x3 = solution
        constraint1 = x1 + x2 + x3      # ‚â§ 30
        constraint2 = 2*x1 + x2         # ‚â• 40
        constraint3 = 3*x2 + 2*x3       # ‚â§ 60
        
        print("üìä VERIFICACI√ìN MANUAL:")
        print(f"  Restricci√≥n 1: {constraint1:.3f} ‚â§ 30 {'‚úì' if constraint1 <= 30.001 else '‚úó'}")
        print(f"  Restricci√≥n 2: {constraint2:.3f} ‚â• 40 {'‚úì' if constraint2 >= 39.999 else '‚úó'}")
        print(f"  Restricci√≥n 3: {constraint3:.3f} ‚â§ 60 {'‚úì' if constraint3 <= 60.001 else '‚úó'}")
        print()
        
        if constraint2 < 39.999:
            print("üö® CONFIRMADO: El solver est√° violando la restricci√≥n ‚â•")
            print("   Esto demuestra que NO est√° manejando restricciones ‚â• correctamente")
        
        print("üìã AN√ÅLISIS DEL TABLEAU FINAL:")
        if tableau_history:
            final_tableau = tableau_history[-1]
            print(f"  Tableau final shape: {final_tableau.shape}")
            print(f"  √öltima fila de costos: {final_tableau[0, :]}")
            print(f"  Valores RHS: {final_tableau[1:, -1]}")
        
    except Exception as e:
        print(f"‚ùå Error en el solver: {str(e)}")
    
    print()
    print("üîß SOLUCI√ìN REQUERIDA:")
    print("  1. Modificar el solver para manejar restricciones ‚â•")
    print("  2. Convertir 2x‚ÇÅ + x‚ÇÇ ‚â• 40 a -2x‚ÇÅ - x‚ÇÇ ‚â§ -40")
    print("  3. Agregar variables artificiales para restricciones ‚â•")
    print("  4. Manejar correctamente los valores negativos en b")

if __name__ == "__main__":
    debug_dosfases_detailed()
