import requests
import json

def test_problem_corrected():
    """Test del problema con configuraci√≥n corregida"""
    print("üîß Prueba Corregida del Problema de Optimizaci√≥n")
    print("=" * 55)
    print("MAX Z = 2x‚ÇÅ + 3x‚ÇÇ + 4x‚ÇÉ")
    print("s.a.")
    print("  x‚ÇÅ + x‚ÇÇ + x‚ÇÉ ‚â§ 30     ‚Üê (1) desigualdad tipo ‚â§")
    print("  2x‚ÇÅ + x‚ÇÇ     ‚â• 40     ‚Üê (2) desigualdad tipo ‚â•")
    print("  3x‚ÇÇ + 2x‚ÇÉ    ‚â§ 60     ‚Üê (3) desigualdad tipo ‚â§")
    print("  x‚ÇÅ, x‚ÇÇ, x‚ÇÉ   ‚â• 0")
    print("=" * 55)
    
    # Para el m√©todo de Dos Fases, voy a convertir la restricci√≥n ‚â• a forma est√°ndar
    # La restricci√≥n 2x‚ÇÅ + x‚ÇÇ ‚â• 40 se convierte en:
    # 2x‚ÇÅ + x‚ÇÇ - s‚ÇÇ = 40 (donde s‚ÇÇ ‚â• 0 es la variable de exceso)
    # Pero como s‚ÇÇ aparece con signo negativo, necesitamos variable artificial
    
    # Para simplificar el an√°lisis, voy a probar diferentes configuraciones:
    
    print("\nüîç AN√ÅLISIS DEL PROBLEMA:")
    print("1. Revisemos si el problema es factible manualmente:")
    print("   - Para x‚ÇÉ = 30: satisface x‚ÇÅ + x‚ÇÇ + x‚ÇÉ ‚â§ 30 ‚Üí 0 + 0 + 30 = 30 ‚úì")
    print("   - Para x‚ÇÉ = 30: restricci√≥n 2x‚ÇÅ + x‚ÇÇ ‚â• 40 ‚Üí 0 + 0 = 0 < 40 ‚úó")
    print("   - Conclusi√≥n: x‚ÇÉ = 30, x‚ÇÅ = x‚ÇÇ = 0 NO es factible")
    print()
    
    print("2. Busquemos una soluci√≥n factible:")
    print("   - Si x‚ÇÅ = 20, x‚ÇÇ = 0, x‚ÇÉ = 0:")
    print("     * x‚ÇÅ + x‚ÇÇ + x‚ÇÉ = 20 ‚â§ 30 ‚úì")
    print("     * 2x‚ÇÅ + x‚ÇÇ = 40 ‚â• 40 ‚úì") 
    print("     * 3x‚ÇÇ + 2x‚ÇÉ = 0 ‚â§ 60 ‚úì")
    print("     * Z = 2(20) + 3(0) + 4(0) = 40")
    print()
    
    print("   - Si x‚ÇÅ = 0, x‚ÇÇ = 40, x‚ÇÉ = 0:")
    print("     * x‚ÇÅ + x‚ÇÇ + x‚ÇÉ = 40 > 30 ‚úó")
    print("     * No es factible")
    print()
    
    print("   - Probemos x‚ÇÅ = 10, x‚ÇÇ = 20, x‚ÇÉ = 0:")
    print("     * x‚ÇÅ + x‚ÇÇ + x‚ÇÉ = 30 ‚â§ 30 ‚úì")
    print("     * 2x‚ÇÅ + x‚ÇÇ = 40 ‚â• 40 ‚úì")
    print("     * 3x‚ÇÇ + 2x‚ÇÉ = 60 ‚â§ 60 ‚úì") 
    print("     * Z = 2(10) + 3(20) + 4(0) = 80")
    print()
    
    # Ahora voy a probar con diferentes configuraciones para ver si puedo obtener el resultado correcto
    
    # Configuraci√≥n 1: Problema original
    print("üß™ Configuraci√≥n 1: Problema original")
    test_config_1 = {
        'c': '2,3,4',
        'A': '1,1,1\n2,1,0\n0,3,2',
        'b': '30,40,60',
        'eq_constraints': '1',  # Restricci√≥n 2 necesita artificial
        'minimize': '',
        'track_iterations': 'on'
    }
    
    test_configuration("Original", test_config_1)
    
    # Configuraci√≥n 2: Convertir ‚â• a ‚â§ multiplicando por -1
    print("\nüß™ Configuraci√≥n 2: Convertir 2x‚ÇÅ + x‚ÇÇ ‚â• 40 a -2x‚ÇÅ - x‚ÇÇ ‚â§ -40")
    test_config_2 = {
        'c': '2,3,4',
        'A': '1,1,1\n-2,-1,0\n0,3,2',  # Segunda fila multiplicada por -1
        'b': '30,-40,60',                # Segunda componente multiplicada por -1
        'eq_constraints': '',             # Ahora todas son ‚â§
        'minimize': '',
        'track_iterations': 'on'
    }
    
    test_configuration("Convertida a ‚â§", test_config_2)
    
    # Configuraci√≥n 3: Usar todas como igualdades para Dos Fases
    print("\nüß™ Configuraci√≥n 3: Tratar todas como igualdades")
    test_config_3 = {
        'c': '2,3,4',
        'A': '1,1,1\n2,1,0\n0,3,2',
        'b': '30,40,60',
        'eq_constraints': '0,1,2',  # Todas las restricciones como igualdades
        'minimize': '',
        'track_iterations': 'on'
    }
    
    test_configuration("Todas igualdades", test_config_3)

def test_configuration(name, config):
    """Test una configuraci√≥n espec√≠fica"""
    print(f"   Probando: {name}")
    
    url = 'http://localhost:5000/api/resolver/dosfases'
    
    # Convertir formato de formulario a API
    api_data = {
        'c': [float(x) for x in config['c'].split(',')],
        'A': [[float(x) for x in row.split(',')] for row in config['A'].split('\n')],
        'b': [float(x) for x in config['b'].split(',')],
        'eq_constraints': [int(x) for x in config['eq_constraints'].split(',')] if config['eq_constraints'] else [],
        'minimize': False,
        'track_iterations': True
    }
    
    try:
        response = requests.post(
            url, 
            json=api_data, 
            headers={'Content-Type': 'application/json'},
            timeout=30
        )
        
        if response.status_code == 200:
            try:
                result = response.json()
                if result.get('success'):
                    print(f"   ‚úÖ √âxito: {result.get('solution', 'N/A')}, Z = {result.get('optimal_value', 'N/A')}")
                else:
                    print(f"   ‚ö†Ô∏è Procesado pero no exitoso: {result.get('solution', 'N/A')}")
            except json.JSONDecodeError:
                print("   ‚ùå Error JSON")
        else:
            print(f"   ‚ùå Error HTTP: {response.status_code}")
            
    except Exception as e:
        print(f"   üí• Error: {e}")

if __name__ == "__main__":
    test_problem_corrected()
