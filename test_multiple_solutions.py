import requests
import json

def test_multiple_solutions_problem():
    """
    Prueba el problema cl√°sico de soluciones m√∫ltiples:
    MAX Z = x‚ÇÅ + x‚ÇÇ
    s.a.
        x‚ÇÅ + x‚ÇÇ ‚â§ 4
        2x‚ÇÅ + x‚ÇÇ ‚â§ 6
        x‚ÇÅ, x‚ÇÇ ‚â• 0
    
    Este problema tiene infinitas soluciones √≥ptimas entre (2,2) y (3,1).
    """
    
    # Datos del problema
    problem_data = {
        'c': '1,1',  # Funci√≥n objetivo: x1 + x2
        'A': '1,1\n2,1',  # Restricciones: x1+x2‚â§4, 2x1+x2‚â§6
        'b': '4,6',  # Lados derechos
        'minimize': False,  # Maximizar
        'track_iterations': True  # Para ver el tableau final
    }
    
    base_url = 'http://localhost:5000'
    
    print("üßÆ Probando detecci√≥n de soluciones m√∫ltiples...")
    print(f"Problema: MAX Z = x‚ÇÅ + x‚ÇÇ")
    print(f"s.a.    x‚ÇÅ + x‚ÇÇ ‚â§ 4")
    print(f"        2x‚ÇÅ + x‚ÇÇ ‚â§ 6")
    print(f"        x‚ÇÅ, x‚ÇÇ ‚â• 0")
    print("\n" + "="*50)
    
    # Probar los tres m√©todos
    methods = [
        ('Simplex', f'{base_url}/resolver/simplex'),
        ('Gran M', f'{base_url}/resolver/granm'),
        ('Dos Fases', f'{base_url}/resolver/dosfases')
    ]
    
    for method_name, url in methods:
        print(f"\nüîç Probando m√©todo: {method_name}")
        print("-" * 30)
        
        try:
            # Preparar datos espec√≠ficos para cada m√©todo
            data = problem_data.copy()
            
            if method_name == 'Gran M':
                data['eq_constraints'] = ''
                data['ge_constraints'] = ''
                data['M'] = '1000000'
            elif method_name == 'Dos Fases':
                data['eq_constraints'] = ''
                data['ge_constraints'] = ''
            
            # Enviar solicitud
            response = requests.post(url, data=data)
            
            if response.status_code != 200:
                print(f"‚ùå Error HTTP {response.status_code}")
                continue
            
            # Buscar informaci√≥n de soluciones m√∫ltiples en la respuesta HTML
            html_content = response.text
            
            # Verificar si se detectaron soluciones m√∫ltiples
            if 'soluciones √≥ptimas m√∫ltiples' in html_content.lower():
                print("‚úÖ ¬°Soluciones m√∫ltiples detectadas!")
                
                # Extraer m√°s informaci√≥n si est√° disponible
                if 'Variables candidatas' in html_content:
                    print("üìã Variables candidatas encontradas")
                
                if 'Soluciones alternativas' in html_content:
                    print("üîÑ Soluciones alternativas generadas")
                    
            else:
                print("‚ùå No se detectaron soluciones m√∫ltiples")
                
                # Verificar si al menos se obtuvo una soluci√≥n
                if 'Soluci√≥n' in html_content and 'Valor √ìptimo' in html_content:
                    print("‚ÑπÔ∏è  Se obtuvo una soluci√≥n √∫nica")
                else:
                    print("‚ö†Ô∏è  No se obtuvo ninguna soluci√≥n")
                    
        except requests.exceptions.ConnectionError:
            print(f"‚ùå Error: No se pudo conectar al servidor en {url}")
            print("   Aseg√∫rate de que el servidor est√© ejecut√°ndose")
        except Exception as e:
            print(f"‚ùå Error inesperado: {e}")
    
    print("\n" + "="*50)
    print("üìä An√°lisis te√≥rico del problema:")
    print("   - V√©rtices factibles: (0,0), (0,4), (2,2), (3,1), (3,0)")
    print("   - Soluciones √≥ptimas: Segmento de (2,2) a (3,1)")
    print("   - Valor √≥ptimo: Z = 4")
    print("   - Detecci√≥n: Costo reducido = 0 para variable no b√°sica")

def test_with_api():
    """Prueba usando la API directamente para obtener resultados JSON"""
    
    problem_data = {
        'c': [1, 1],
        'A': [[1, 1], [2, 1]],
        'b': [4, 6],
        'minimize': False,
        'track_iterations': True
    }
    
    base_url = 'http://localhost:5000/api'
    
    print("\nüîß Probando con API JSON...")
    print("-" * 30)
    
    methods = [
        ('Simplex', f'{base_url}/resolver/simplex'),
        ('Gran M', f'{base_url}/resolver/granm'),
        ('Dos Fases', f'{base_url}/resolver/dosfases')
    ]
    
    for method_name, url in methods:
        try:
            response = requests.post(url, json=problem_data)
            
            if response.status_code == 200:
                result = response.json()
                
                print(f"\nüìà {method_name}:")
                print(f"   Soluci√≥n: {result.get('solution', 'N/A')}")
                print(f"   Valor √≥ptimo: {result.get('optimal_value', 'N/A')}")
                print(f"   Soluciones m√∫ltiples: {result.get('has_multiple_solutions', False)}")
                
                if result.get('alternative_solutions'):
                    print(f"   Alternativas: {len(result['alternative_solutions'])}")
                    for i, alt in enumerate(result['alternative_solutions']):
                        print(f"     Alt {i+1}: {alt.get('solution', 'N/A')}")
                        
            else:
                print(f"‚ùå {method_name}: Error HTTP {response.status_code}")
                
        except Exception as e:
            print(f"‚ùå {method_name}: Error {e}")

if __name__ == "__main__":
    print("üöÄ Iniciando pruebas de detecci√≥n de soluciones m√∫ltiples")
    print("="*60)
    
    # Probar con interfaz web
    test_multiple_solutions_problem()
    
    # Probar con API
    test_with_api()
    
    print("\n‚ú® Pruebas completadas")
